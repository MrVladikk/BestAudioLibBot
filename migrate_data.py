import asyncio
from sqlalchemy import create_engine, text, select, inspect, func
from sqlalchemy.orm import sessionmaker
from tqdm import tqdm

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏ –∏ Base
from database import User, Genre, Author, Book, AudioFile, Favorite, UserProgress, Base

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
SQLITE_DB_FILE = "audiobooks.db"
POSTGRES_CONNECTION_STRING = 'postgresql://neondb_owner:npg_JwW3qebOzH8R@ep-fragrant-resonance-a9vrs98d-pooler.gwc.azure.neon.tech/neondb?sslmode=require'
# -----------------

sqlite_engine = create_engine(f'sqlite:///{SQLITE_DB_FILE}')
postgres_engine = create_engine(POSTGRES_CONNECTION_STRING)

SqliteSession = sessionmaker(bind=sqlite_engine)
PostgresSession = sessionmaker(bind=postgres_engine)

source_session = SqliteSession()
dest_session = PostgresSession()

def migrate_table(model, source_session, dest_session):
    """–ß–∏—Ç–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –∫–æ–ø–∏–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π."""
    records = source_session.execute(select(model)).scalars().all()
    if not records:
        return []

    new_objects = []
    for record in records:
        data = {c.name: getattr(record, c.name) for c in record.__table__.columns}
        new_objects.append(model(**data))
    
    return new_objects

def run_migration():
    print("--- –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL (v3, —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π) ---")
    
    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    models_to_migrate = [User, Genre, Author, Book, AudioFile, Favorite, UserProgress]
    tables_in_reverse_order = reversed(Base.metadata.sorted_tables)

    try:
        # --- –®–ê–ì 1: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ ---
        print("\n1. –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
        with postgres_engine.connect() as conn:
            trans = conn.begin()
            for table in tables_in_reverse_order:
                print(f"  - –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table.name}...")
                conn.execute(text(f'TRUNCATE TABLE "{table.name}" RESTART IDENTITY CASCADE;'))
            trans.commit()
        print("–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")

        # --- –®–ê–ì 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
        print("\n2. –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –∏ –∑–∞–ø–∏—Å—å –≤ –Ω–æ–≤—É—é...")
        all_new_records = []
        for model in tqdm(models_to_migrate, desc="–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"):
            recs = migrate_table(model, source_session, dest_session)
            if recs:
                all_new_records.extend(recs)
        
        print("\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –Ω–æ–≤—É—é –±–∞–∑—É...")
        if all_new_records:
            dest_session.add_all(all_new_records)
            dest_session.commit()
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        # --- –®–ê–ì 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ ID ---
        # –≠—Ç–æ—Ç —à–∞–≥ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π RESTART IDENTITY –≤ —à–∞–≥–µ 1, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º.
        print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ ID...")
        with postgres_engine.connect() as conn:
            trans = conn.begin()
            for model in models_to_migrate:
                table_name = model.__tablename__
                pk_name = f"{table_name}_id_seq"
                max_id_result = dest_session.execute(select(func.max(model.id))).scalar()
                max_id = max_id_result if max_id_result is not None else 1
                try:
                    conn.execute(text(f"SELECT setval(pg_get_serial_sequence('\"{table_name}\"', 'id'), {max_id}, true);"))
                except Exception as seq_e:
                    pass
            trans.commit()
        
        print("–°—á–µ—Ç—á–∏–∫–∏ ID —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        print(f"\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞: {e}")
        print("–û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        dest_session.rollback()
    finally:
        source_session.close()
        dest_session.close()

if __name__ == '__main__':
    run_migration()