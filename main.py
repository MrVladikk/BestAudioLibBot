import asyncio
import logging
import os
from datetime import datetime, timezone

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import BotCommand
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Chat
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
from sqlalchemy.exc import OperationalError

from database import async_session_factory, Genre, Book, AudioFile, Author, UserProgress, Favorite, User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7743716366:AAFyNE4FCaSWvRfo65pDjOOoC_doWH7jBls'
ADMIN_ID = 705446667
CHAPTERS_PER_PAGE = 10
FAVORITES_PER_PAGE = 10
BOOKS_PER_PAGE = 5

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SearchState(StatesGroup):
    waiting_for_query = State()

class AdminState(StatesGroup):
    waiting_for_chapter_audio = State()
    waiting_for_broadcast_message = State()
    confirm_broadcast = State()
    editing_book_waiting_for_new_value = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìö –ñ–∞–Ω—Ä—ã", callback_data="browse_genres"), InlineKeyboardButton(text="üë§ –ê–≤—Ç–æ—Ä—ã", callback_data="browse_authors")],
    [InlineKeyboardButton(text="‚≠êÔ∏è –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="my_favorites:0")],
    [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="start_search")],
    [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞", callback_data="random_book")]
])
button_to_main_menu = InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")

admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
    [InlineKeyboardButton(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É", callback_data="admin_edit_book_page:0")],
    [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="admin_delete_book_page:0")],
    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤—É –∫ –∫–Ω–∏–≥–µ", callback_data="admin_add_chapter_page:0")],
    [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")]
])
button_to_admin_panel = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="to_admin_panel")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
@retry(
    stop=stop_after_attempt(3),
    wait=wait_exponential(multiplier=1, min=4, max=10),
    retry=retry_if_exception_type(OperationalError)
)
async def execute_query(session: AsyncSession, query):
    logger.debug("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: %s", query)
    result = await session.execute(query)
    logger.debug("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    return result

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∫–Ω–∏–≥–∏
async def show_book_card(target_chat: Chat, book_id: int, is_new_message: bool = False):
    logger.debug("–í—ã–∑–æ–≤ show_book_card –¥–ª—è book_id=%d, is_new_message=%s", book_id, is_new_message)
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ author –∏ genre
            query = select(Book).filter(Book.id == book_id).options(joinedload(Book.author), joinedload(Book.genre))
            book = (await execute_query(session, query)).scalars().first()
            if not book:
                logger.warning("–ö–Ω–∏–≥–∞ —Å id=%d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", book_id)
                return

            card_text = f"<b>{book.title}</b>\n\n<b>–ê–≤—Ç–æ—Ä:</b> {book.author.name}\n<b>–ñ–∞–Ω—Ä:</b> {book.genre.name}"
            builder = InlineKeyboardBuilder()
            is_favorite = (await execute_query(session, select(Favorite).filter_by(user_id=target_chat.id, book_id=book_id))).scalars().first()
            if is_favorite:
                builder.add(InlineKeyboardButton(text="üåü –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"rm_fav:{book_id}"))
            else:
                builder.add(InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav:{book_id}"))
            progress = (await execute_query(session, select(UserProgress).filter_by(user_id=target_chat.id, book_id=book_id))).scalars().first()
            if progress:
                last_chapter = (await execute_query(session, select(AudioFile).filter_by(id=progress.last_chapter_id))).scalars().first()
                if last_chapter:
                    builder.add(InlineKeyboardButton(
                        text=f"‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å '{last_chapter.title}'",
                        callback_data=f"chapter:{last_chapter.id}"
                    ))
            builder.add(InlineKeyboardButton(text="üìñ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–ª–∞–≤—ã", callback_data=f"ch_page:{book.id}:0"))
            builder.row(button_to_main_menu)
            builder.adjust(1)
            logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–Ω–∏–≥–∏: %s", card_text)
            if book.cover_file_id:
                await bot.send_photo(
                    chat_id=target_chat.id,
                    photo=book.cover_file_id,
                    caption=card_text,
                    reply_markup=builder.as_markup()
                )
            elif is_new_message:
                await bot.send_message(
                    chat_id=target_chat.id,
                    text=card_text,
                    reply_markup=builder.as_markup()
                )
            else:
                await target_chat.edit_text(card_text, reply_markup=builder.as_markup())
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ show_book_card: %s", e)
            await session.rollback()
            raise

# –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–ª–∞–≤ –∫–Ω–∏–≥–∏
async def create_chapters_keyboard(book_id: int, page: int = 0) -> InlineKeyboardBuilder:
    async with async_session_factory() as session:
        try:
            chapters_count = (await execute_query(session, select(func.count(AudioFile.id)).filter(AudioFile.book_id == book_id))).scalar()
            chapters_on_page = (await execute_query(
                session,
                select(AudioFile).filter(AudioFile.book_id == book_id).order_by(AudioFile.id).limit(CHAPTERS_PER_PAGE).offset(page * CHAPTERS_PER_PAGE)
            )).scalars().all()
            builder = InlineKeyboardBuilder()
            for chapter in chapters_on_page:
                builder.add(InlineKeyboardButton(text=chapter.title, callback_data=f"chapter:{chapter.id}"))
            builder.adjust(1)
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"ch_page:{book_id}:{page-1}"))
            if (page + 1) * CHAPTERS_PER_PAGE < chapters_count:
                nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"ch_page:{book_id}:{page+1}"))
            if nav_buttons:
                builder.row(*nav_buttons)
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–µ", callback_data=f"book:{book_id}"))
            return builder
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ create_chapters_keyboard: %s", e)
            await session.rollback()
            return InlineKeyboardBuilder()

# –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–∏–≥–∞–º–∏
async def create_admin_books_keyboard(page: int = 0, callback_prefix: str = "del_confirm") -> InlineKeyboardBuilder:
    async with async_session_factory() as session:
        try:
            books_count = (await execute_query(session, select(func.count(Book.id)))).scalar()
            books_on_page = (await execute_query(
                session,
                select(Book).order_by(Book.title).limit(BOOKS_PER_PAGE).offset(page * BOOKS_PER_PAGE)
            )).scalars().all()
            builder = InlineKeyboardBuilder()
            for book in books_on_page:
                builder.add(InlineKeyboardButton(text=book.title, callback_data=f"{callback_prefix}:{book.id}"))
            builder.adjust(1)
            page_callback_prefix = "admin_delete_book_page"
            if callback_prefix == "add_chapter_to":
                page_callback_prefix = "admin_add_chapter_page"
            elif callback_prefix == "edit_book":
                page_callback_prefix = "admin_edit_book_page"
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{page_callback_prefix}:{page-1}"))
            if (page + 1) * BOOKS_PER_PAGE < books_count:
                nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{page_callback_prefix}:{page+1}"))
            if nav_buttons:
                builder.row(*nav_buttons)
            builder.row(button_to_admin_panel)
            return builder
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ create_admin_books_keyboard: %s", e)
            await session.rollback()
            return InlineKeyboardBuilder()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞
async def set_main_menu(bot: Bot):
    main_menu_commands = [
        BotCommand(command="/start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="/clear", description="–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        BotCommand(command="/admin", description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    ]
    await bot.set_my_commands(main_menu_commands)

# –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async def refresh_book_card(callback: types.CallbackQuery):
    book_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ author –∏ genre
            query = select(Book).filter_by(id=book_id).options(joinedload(Book.author), joinedload(Book.genre))
            book = (await execute_query(session, query)).scalars().first()
            if not book:
                logger.warning("–ö–Ω–∏–≥–∞ —Å id=%d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", book_id)
                return
            card_text = f"<b>{book.title}</b>\n\n<b>–ê–≤—Ç–æ—Ä:</b> {book.author.name}\n<b>–ñ–∞–Ω—Ä:</b> {book.genre.name}"
            builder = InlineKeyboardBuilder()
            is_favorite = (await execute_query(session, select(Favorite).filter_by(user_id=user_id, book_id=book_id))).scalars().first()
            if is_favorite:
                builder.add(InlineKeyboardButton(text="üåü –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"rm_fav:{book_id}"))
            else:
                builder.add(InlineKeyboardButton(text="‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav:{book_id}"))
            progress = (await execute_query(session, select(UserProgress).filter_by(user_id=user_id, book_id=book_id))).scalars().first()
            if progress:
                last_chapter = (await execute_query(session, select(AudioFile).filter_by(id=progress.last_chapter_id))).scalars().first()
                if last_chapter:
                    builder.add(InlineKeyboardButton(
                        text=f"‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å '{last_chapter.title}'",
                        callback_data=f"chapter:{last_chapter.id}"
                    ))
            builder.add(InlineKeyboardButton(text="üìñ –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–ª–∞–≤—ã", callback_data=f"ch_page:{book.id}:0"))
            builder.row(button_to_main_menu)
            builder.adjust(1)
            try:
                if callback.message.photo:
                    await callback.message.edit_caption(caption=card_text, reply_markup=builder.as_markup())
                else:
                    await callback.message.edit_text(card_text, reply_markup=builder.as_markup())
            except TelegramBadRequest as e:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É: %s", e)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ refresh_book_card: %s", e)
            await session.rollback()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("admin"))
async def admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_keyboard)

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–î–∞, –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast:start"))
    builder.add(InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="to_admin_panel"))
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏?\n"
        "–ï–≥–æ –ø–æ–ª—É—á–∞—Ç –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ
@dp.callback_query(F.data == "broadcast:cancel")
async def broadcast_cancel_initial(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

# –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "broadcast:start")
async def broadcast_get_message(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.waiting_for_broadcast_message)
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, —Å—Ç–∏–∫–µ—Ä –∏ —Ç.–¥."
    )
    await callback.answer()

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(AdminState.waiting_for_broadcast_message, F.content_type.in_({'text', 'photo', 'sticker', 'video', 'document'}))
async def broadcast_preview(message: types.Message, state: FSMContext):
    await state.update_data(
        broadcast_chat_id=message.chat.id,
        broadcast_message_id=message.message_id
    )
    await state.set_state(AdminState.confirm_broadcast)
    await message.answer("–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—Å—ë –≤–µ—Ä–Ω–æ?")
    await bot.copy_message(
        chat_id=message.chat.id,
        from_chat_id=message.chat.id,
        message_id=message.message_id
    )
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="broadcast:send"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast:cancel"))
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?", reply_markup=builder.as_markup())

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.callback_query(AdminState.confirm_broadcast, F.data == "broadcast:send")
async def broadcast_run(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    from_chat_id = data.get('broadcast_chat_id')
    message_id = data.get('broadcast_message_id')
    await state.clear()
    if not from_chat_id or not message_id:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await callback.answer()
    async with async_session_factory() as session:
        try:
            users = (await execute_query(session, select(User.user_id))).scalars().all()
            await callback.message.edit_text(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏... –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            await callback.answer()
            success_count = 0
            fail_count = 0
            for user_id in users:
                try:
                    await bot.copy_message(
                        chat_id=user_id,
                        from_chat_id=from_chat_id,
                        message_id=message_id
                    )
                    success_count += 1
                except Exception as e:
                    fail_count += 1
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", user_id, e)
                await asyncio.sleep(0.1)
            await callback.message.answer(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å: {fail_count} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞)"
            )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ broadcast_run: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(AdminState.confirm_broadcast, F.data == "broadcast:cancel")
async def broadcast_cancel_final(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.callback_query(F.data == "to_admin_panel")
async def process_to_admin_panel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_keyboard)
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
@dp.callback_query(F.data == "admin_stats")
async def get_admin_stats(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    async with async_session_factory() as session:
        try:
            book_count = (await execute_query(session, select(func.count(Book.id)))).scalar()
            author_count = (await execute_query(session, select(func.count(Author.id)))).scalar()
            genre_count = (await execute_query(session, select(func.count(Genre.id)))).scalar()
            chapters_count = (await execute_query(session, select(func.count(AudioFile.id)))).scalar()
            total_users = (await execute_query(session, select(func.count(User.id)))).scalar()
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**:\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üìö –ö–Ω–∏–≥: {book_count}\n"
                f"üë§ –ê–≤—Ç–æ—Ä–æ–≤: {author_count}\n"
                f"üé® –ñ–∞–Ω—Ä–æ–≤: {genre_count}\n"
                f"üéß –í—Å–µ–≥–æ –≥–ª–∞–≤: {chapters_count}"
            )
            await callback.message.answer(stats_text)
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ get_admin_stats: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("admin_delete_book_page:"))
async def admin_delete_book_list(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    page = int(callback.data.split(":")[1])
    builder = await create_admin_books_keyboard(page, callback_prefix="del_confirm")
    await callback.message.edit_text("–ö–∞–∫—É—é –∫–Ω–∏–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?", reply_markup=builder.as_markup())
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
@dp.callback_query(F.data.startswith("del_confirm:"))
async def admin_delete_confirm(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    book_id = int(callback.data.split(":")[1])
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
            query = select(Book).filter_by(id=book_id).options(joinedload(Book.author), joinedload(Book.genre))
            book = (await execute_query(session, query)).scalars().first()
            if not book:
                await callback.answer("–ö–Ω–∏–≥–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
                await process_to_admin_panel(callback, None)
                return
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚ùóÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"del_execute:{book.id}"))
            builder.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="to_admin_panel"))
            await callback.message.edit_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É '<b>{book.title}</b>' –∏ –≤—Å–µ –µ—ë –≥–ª–∞–≤—ã?",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ admin_delete_confirm: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
@dp.callback_query(F.data.startswith("del_execute:"))
async def admin_delete_execute(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    book_id = int(callback.data.split(":")[1])
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
            query = select(Book).filter_by(id=book_id).options(joinedload(Book.author), joinedload(Book.genre))
            book = (await execute_query(session, query)).scalars().first()
            if book:
                book_title = book.title
                await session.delete(book)
                await session.commit()
                await callback.answer(f"–ö–Ω–∏–≥–∞ '{book_title}' —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
            else:
                await callback.answer("–ö–Ω–∏–≥–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
            await process_to_admin_panel(callback, None)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ admin_delete_execute: %s", e)
            await session.rollback()
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤—ã
@dp.callback_query(F.data.startswith("admin_add_chapter_page:"))
async def admin_add_chapter_list(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    page = int(callback.data.split(":")[1])
    builder = await create_admin_books_keyboard(page, callback_prefix="add_chapter_to")
    await callback.message.edit_text("–ö –∫–∞–∫–æ–π –∫–Ω–∏–≥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤—É?", reply_markup=builder.as_markup())
    await callback.answer()

# –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤—ã
@dp.callback_query(F.data.startswith("add_chapter_to:"))
async def admin_add_chapter_select_book(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    book_id = int(callback.data.split(":")[1])
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
            query = select(Book).filter_by(id=book_id).options(joinedload(Book.author), joinedload(Book.genre))
            book = (await execute_query(session, query)).scalars().first()
            if not book:
                await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            await state.set_state(AdminState.waiting_for_chapter_audio)
            await state.update_data(book_id=book_id)
            builder = InlineKeyboardBuilder()
            builder.add(button_to_admin_panel)
            await callback.message.edit_text(
                f"–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –≥–ª–∞–≤—É –∫ '<b>{book.title}</b>'.\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã.",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ admin_add_chapter_select_book: %s", e)
            await session.rollback()
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –ü—Ä–∏—ë–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã
@dp.message(AdminState.waiting_for_chapter_audio, F.audio)
async def admin_add_chapter_receive_audio(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    book_id = state_data.get('book_id')
    if not book_id:
        await message.reply("–û—à–∏–±–∫–∞: ID –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    async with async_session_factory() as session:
        try:
            chapter_title = os.path.splitext(message.audio.file_name)[0] if message.audio.file_name else "–ù–æ–≤–∞—è –≥–ª–∞–≤–∞"
            new_chapter = AudioFile(book_id=book_id, title=chapter_title, file_id=message.audio.file_id)
            session.add(new_chapter)
            await session.commit()
            await message.reply(f"‚úÖ –ì–ª–∞–≤–∞ '{chapter_title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            await admin_panel(message, state)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ admin_add_chapter_receive_audio: %s", e)
            await session.rollback()
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("admin_edit_book_page:"))
async def admin_edit_book_list(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    page = int(callback.data.split(":")[1])
    builder = await create_admin_books_keyboard(page, callback_prefix="edit_book")
    await callback.message.edit_text("–ö–∞–∫—É—é –∫–Ω–∏–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=builder.as_markup())
    await callback.answer()

# –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("edit_book:"))
async def admin_edit_book_select(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    await state.clear()
    book_id = int(callback.data.split(":")[1])
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
            query = select(Book).filter_by(id=book_id).options(joinedload(Book.author), joinedload(Book.genre))
            book = (await execute_query(session, query)).scalars().first()
            if not book:
                return await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            await state.update_data(edit_book_id=book_id)
            text = f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: <b>{book.title}</b>\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field:title"))
            builder.add(InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∞", callback_data="edit_field:author"))
            builder.add(InlineKeyboardButton(text="–ñ–∞–Ω—Ä", callback_data="edit_field:genre"))
            builder.add(InlineKeyboardButton(text="–û–±–ª–æ–∂–∫—É", callback_data="edit_field:cover"))
            builder.adjust(2)
            builder.row(button_to_admin_panel)
            await callback.message.edit_text(text, reply_markup=builder.as_markup())
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ admin_edit_book_select: %s", e)
            await session.rollback()
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(StateFilter(None), F.data.startswith("edit_field:"))
async def admin_edit_field_select(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
    field_to_edit = callback.data.split(":")[1]
    await state.update_data(field_to_edit=field_to_edit)
    await state.set_state(AdminState.editing_book_waiting_for_new_value)
    prompt_text = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        "author": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:",
        "genre": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞:",
        "cover": "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –æ–±–ª–æ–∂–∫–∏:"
    }
    cancel_button = InlineKeyboardMarkup(inline_keyboard=[[button_to_admin_panel]])
    await callback.message.edit_text(prompt_text.get(field_to_edit, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ."), reply_markup=cancel_button)
    await callback.answer()

# –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(AdminState.editing_book_waiting_for_new_value, F.text)
async def admin_edit_receive_text(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    book_id = state_data.get('edit_book_id')
    field_to_edit = state_data.get('field_to_edit')
    if not all([book_id, field_to_edit]):
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ /admin –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=admin_keyboard)
        return await state.clear()
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
            query = select(Book).filter_by(id=book_id).options(joinedload(Book.author), joinedload(Book.genre))
            book = (await execute_query(session, query)).scalars().first()
            if not book:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                return await state.clear()
            new_value = message.text
            if field_to_edit == 'title':
                book.title = new_value
            elif field_to_edit == 'author':
                author = (await execute_query(session, select(Author).filter_by(name=new_value))).scalars().first()
                if not author:
                    author = Author(name=new_value)
                    session.add(author)
                book.author = author
            elif field_to_edit == 'genre':
                genre = (await execute_query(session, select(Genre).filter_by(name=new_value))).scalars().first()
                if not genre:
                    genre = Genre(name=new_value)
                    session.add(genre)
                book.genre = genre
            await session.commit()
            await state.clear()
            await message.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_keyboard)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ admin_edit_receive_text: %s", e)
            await session.rollback()
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–∏—ë–º –Ω–æ–≤–æ–π –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∫–Ω–∏–≥–∏
@dp.message(AdminState.editing_book_waiting_for_new_value, F.photo)
async def admin_edit_receive_cover(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    book_id = state_data.get('edit_book_id')
    field_to_edit = state_data.get('field_to_edit')
    if field_to_edit != 'cover':
        return await message.reply("–û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏
            query = select(Book).filter_by(id=book_id).options(joinedload(Book.author), joinedload(Book.genre))
            book = (await execute_query(session, query)).scalars().first()
            if not book:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                return await state.clear()
            book.cover_file_id = message.photo[-1].file_id
            await session.commit()
            await state.clear()
            await message.answer("‚úÖ –û–±–ª–æ–∂–∫–∞ –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_keyboard)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ admin_edit_receive_cover: %s", e)
            await session.rollback()
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start, /menu, /clear
@dp.message(Command("start", "menu", "clear"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    async with async_session_factory() as session:
        try:
            logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è user_id=%d", user_id)
            existing_user = (await execute_query(session, select(User).filter_by(user_id=user_id))).scalars().first()
            if not existing_user:
                new_user = User(
                    user_id=user_id,
                    first_name=message.from_user.first_name,
                    username=message.from_user.username,
                    date_joined=datetime.now(timezone.utc).replace(tzinfo=None)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
                )
                session.add(new_user)
                await session.commit()
                logger.debug("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %d", user_id)
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ–∫–Ω–∏–≥.\n"
                "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                reply_markup=main_keyboard
            )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ send_welcome: %s", e)
            await session.rollback()
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "to_main_menu")
async def process_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    except TelegramBadRequest:
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    await callback.answer()

# –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏
@dp.callback_query(F.data == "random_book")
async def process_random_book(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ author –∏ genre
            query = select(Book).order_by(func.random()).options(joinedload(Book.author), joinedload(Book.genre))
            random_book = (await execute_query(session, query)).scalars().first()
            if random_book:
                await show_book_card(callback.message.chat, random_book.id, is_new_message=True)
            else:
                await callback.message.answer("–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_random_book: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–Ω—Ä–æ–≤
@dp.callback_query(F.data == "browse_genres")
async def process_genres_press(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    async with async_session_factory() as session:
        try:
            genres = (await execute_query(session, select(Genre).order_by(Genre.name))).scalars().all()
            builder = InlineKeyboardBuilder()
            for genre in genres:
                builder.add(InlineKeyboardButton(text=genre.name, callback_data=f"genre:{genre.id}"))
            builder.adjust(2)
            builder.row(button_to_main_menu)
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=builder.as_markup())
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_genres_press: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂–∞–Ω—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
@dp.callback_query(F.data.startswith("genre:"))
async def process_genre_books(callback: types.CallbackQuery):
    genre_id = int(callback.data.split(":")[1])
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ author –∏ genre
            query = select(Book).filter(Book.genre_id == genre_id).order_by(Book.title).options(joinedload(Book.author), joinedload(Book.genre))
            books = (await execute_query(session, query)).scalars().all()
            genre = (await execute_query(session, select(Genre).filter(Genre.id == genre_id))).scalars().first()
            builder = InlineKeyboardBuilder()
            for book in books:
                builder.add(InlineKeyboardButton(text=book.title, callback_data=f"book:{book.id}"))
            builder.adjust(1)
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º", callback_data="browse_genres"), button_to_main_menu)
            await callback.message.edit_text(f"–ö–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ '<b>{genre.name}</b>':", reply_markup=builder.as_markup())
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_genre_books: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ—Ä–æ–≤
@dp.callback_query(F.data == "browse_authors")
async def process_authors_press(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    async with async_session_factory() as session:
        try:
            authors = (await execute_query(session, select(Author).order_by(Author.name))).scalars().all()
            builder = InlineKeyboardBuilder()
            for author in authors:
                builder.add(InlineKeyboardButton(text=author.name, callback_data=f"author:{author.id}"))
            builder.adjust(2)
            builder.row(button_to_main_menu)
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:", reply_markup=builder.as_markup())
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_authors_press: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
@dp.callback_query(F.data.startswith("author:"))
async def process_author_books(callback: types.CallbackQuery):
    author_id = int(callback.data.split(":")[1])
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ author –∏ genre
            query = select(Book).filter(Book.author_id == author_id).order_by(Book.title).options(joinedload(Book.author), joinedload(Book.genre))
            books = (await execute_query(session, query)).scalars().all()
            author = (await execute_query(session, select(Author).filter(Author.id == author_id))).scalars().first()
            builder = InlineKeyboardBuilder()
            for book in books:
                builder.add(InlineKeyboardButton(text=book.title, callback_data=f"book:{book.id}"))
            builder.adjust(1)
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–≤—Ç–æ—Ä–∞–º", callback_data="browse_authors"), button_to_main_menu)
            await callback.message.edit_text(f"–ö–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞ '<b>{author.name}</b>':", reply_markup=builder.as_markup())
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_author_books: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞
@dp.callback_query(F.data == "start_search")
async def process_search_press(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SearchState.waiting_for_query)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@dp.message(SearchState.waiting_for_query)
async def process_search_query(message: types.Message, state: FSMContext):
    await state.clear()
    user_query = message.text.lower()
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ author
            query = select(Book).join(Author).options(joinedload(Book.author))
            all_books = (await execute_query(session, query)).scalars().all()
            search_results = [
                book for book in all_books
                if user_query in book.title.lower() or user_query in book.author.name.lower()
            ]
            builder = InlineKeyboardBuilder()
            if not search_results:
                builder.add(button_to_main_menu)
                await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=builder.as_markup())
                return
            for book in search_results:
                builder.add(InlineKeyboardButton(text=f"{book.title} ({book.author.name})", callback_data=f"book:{book.id}"))
            builder.adjust(1)
            builder.row(button_to_main_menu)
            await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '<b>{message.text}</b>':", reply_markup=builder.as_markup())
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_search_query: %s", e)
            await session.rollback()
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏
@dp.callback_query(F.data.startswith("book:"))
async def process_book_selection(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    book_id = int(callback.data.split(":")[1])
    await show_book_card(callback.message.chat, book_id, is_new_message=True)
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@dp.callback_query(F.data.startswith("add_fav:"))
async def process_add_favorite(callback: types.CallbackQuery):
    book_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    async with async_session_factory() as session:
        try:
            existing = (await execute_query(session, select(Favorite).filter_by(user_id=user_id, book_id=book_id))).scalars().first()
            if not existing:
                session.add(Favorite(user_id=user_id, book_id=book_id))
                await session.commit()
                await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            await refresh_book_card(callback)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_add_favorite: %s", e)
            await session.rollback()
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@dp.callback_query(F.data.startswith("rm_fav:"))
async def process_remove_favorite(callback: types.CallbackQuery):
    book_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    async with async_session_factory() as session:
        try:
            favorite_to_delete = (await execute_query(session, select(Favorite).filter_by(user_id=user_id, book_id=book_id))).scalars().first()
            if favorite_to_delete:
                await session.delete(favorite_to_delete)
                await session.commit()
                await callback.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
            await refresh_book_card(callback)
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_remove_favorite: %s", e)
            await session.rollback()
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@dp.callback_query(F.data.startswith("my_favorites:"))
async def process_my_favorites(callback: types.CallbackQuery):
    page = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ author –∏ genre
            favorite_books_query = select(Book).join(Favorite).filter(Favorite.user_id == user_id).order_by(Favorite.id.desc()).options(joinedload(Book.author), joinedload(Book.genre))
            total_favorites = (await execute_query(session, select(func.count()).select_from(favorite_books_query.subquery()))).scalar()
            paginated_books = (await execute_query(
                session,
                favorite_books_query.limit(FAVORITES_PER_PAGE).offset(page * FAVORITES_PER_PAGE)
            )).scalars().all()
            if not paginated_books:
                await callback.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.", show_alert=True)
                return
            builder = InlineKeyboardBuilder()
            for book in paginated_books:
                builder.add(InlineKeyboardButton(text=f"{book.title} - {book.author.name}", callback_data=f"book:{book.id}"))
            builder.adjust(1)
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_favorites:{page-1}"))
            if (page + 1) * FAVORITES_PER_PAGE < total_favorites:
                nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"my_favorites:{page+1}"))
            if nav_buttons:
                builder.row(*nav_buttons)
            builder.row(button_to_main_menu)
            try:
                await callback.message.edit_text("‚≠êÔ∏è –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:", reply_markup=builder.as_markup())
            except TelegramBadRequest:
                await callback.message.delete()
                await bot.send_message(
                    chat_id=callback.from_user.id,
                    text="‚≠êÔ∏è –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:",
                    reply_markup=builder.as_markup()
                )
            await callback.answer()
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_my_favorites: %s", e)
            await session.rollback()
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –≥–ª–∞–≤–∞–º–∏
@dp.callback_query(F.data.startswith("ch_page:"))
async def process_chapter_page_press(callback: types.CallbackQuery):
    data_parts = callback.data.split(":")
    book_id = int(data_parts[1])
    page = int(data_parts[2])
    builder = await create_chapters_keyboard(book_id, page)
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –í—ã–±–æ—Ä –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–ª–∞–≤—ã
@dp.callback_query(F.data.startswith("chapter:"))
async def process_chapter_selection(callback: types.CallbackQuery):
    chapter_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    async with async_session_factory() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ book
            query = select(AudioFile).filter(AudioFile.id == chapter_id).options(joinedload(AudioFile.book))
            current_chapter = (await execute_query(session, query)).scalars().first()
            if not current_chapter:
                return await callback.answer("–ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            progress = (await execute_query(session, select(UserProgress).filter_by(user_id=user_id, book_id=current_chapter.book_id))).scalars().first()
            if progress:
                progress.last_chapter_id = chapter_id
            else:
                session.add(UserProgress(user_id=user_id, book_id=current_chapter.book_id, last_chapter_id=chapter_id))
            await session.commit()
            await callback.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è—é: {current_chapter.title}")
            await bot.send_audio(
                chat_id=user_id,
                audio=current_chapter.file_id.strip(),
                title=current_chapter.title
            )
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ book –≤ next_chapter
            query = select(AudioFile).filter(
                AudioFile.book_id == current_chapter.book_id,
                AudioFile.id > current_chapter.id
            ).order_by(AudioFile.id).options(joinedload(AudioFile.book))
            next_chapter = (await execute_query(session, query)).scalars().first()
            if next_chapter:
                builder = InlineKeyboardBuilder()
                builder.add(InlineKeyboardButton(
                    text=f"‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è –≥–ª–∞–≤–∞: {next_chapter.title}",
                    callback_data=f"chapter:{next_chapter.id}"
                ))
                await bot.send_message(
                    chat_id=user_id,
                    text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ?",
                    reply_markup=builder.as_markup()
                )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ process_chapter_selection: %s", e)
            await session.rollback()
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def get_photo_file_id(message: types.Message):
    file_id = message.photo[-1].file_id
    await message.reply(f"ID —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ (–¥–ª—è –æ–±–ª–æ–∂–∫–∏):\n<code>{file_id}</code>")

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
@dp.message(F.audio)
async def get_audio_file_id(message: types.Message):
    file_id = message.audio.file_id
    await message.reply(f"ID —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ (–¥–ª—è –≥–ª–∞–≤—ã):\n<code>{file_id}</code>")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await set_main_menu(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())